leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl("Cantidad de reportes por país", position = "topleft",  className = "map.title")
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl("Cantidad de reportes por país", position = "topleft",  className = "map.title")
title <- tags$div(
tag.map.title, HTML("Map title")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl("Cantidad de reportes por país", position = "topleft",  className = "map-title")
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
title <- tags$div(
tag.map.title, HTML("Map title")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl("Cantidad de reportes por país", position = "topleft",  className = "map-title")
title <- tags$div(
tag.map.title, HTML("Cantidad de reportes por país")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title <- tags$div(
tag.map.title, HTML("Cantidad de reportes por país")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title <- tags$div(
tag.map.title, HTML("Cantidad de reportes por país")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
position: fixed !important;
left: 50%;
text-align: center;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
title <- tags$div(
tag.map.title, HTML("Cantidad de reportes por país")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 14px;
}
"))
title <- tags$div(
tag.map.title, HTML("Cantidad de reportes por país")
)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")%>%
setView(lng = -71.0589, lat = 42.3601, zoom = 12)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")%>%
setView(lng = -71.0589, lat = 42.3601, zoom = 1)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")%>%
setView( zoom = 1)
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
addControl(title, position = "topleft",  className = "map-title")%>%
setView(lng = -0, lat = 0, zoom = 1)
utils::getSrcDirectory
utils::getSrcDirectory()
utils::getSrcDirectory()
rstudioapi::getActiveDocumentContext()
getwd()
knitr::opts_chunk$set(echo = TRUE)
#librerías
# stringr y stringi: para arreglar caracteres con acento
#lubridate: para corregir problemas de fechas
#ggplot y plotly: para graficar
#dplyr: manejo de fechas y datos
#rgdal, leaflet, htmlwidgets y htmltools: para mapas
paquetes<-c("stringr","stringi", "lubridate", "ggplot2", "dplyr", "plotly", "rgdal", "leaflet", "htmlwidgets", "htmltools")
for(i in paquetes){
if(!require(i, character.only = TRUE)){
install.packages(i, dependencies=TRUE)
}
require(i, character.only = TRUE)
}
#leo la base de datos
base <- read.csv("../Desconfio_Covid/Base de datos.csv", sep= ",")
#primera mirada a los datos
#View(base)
#chequeo tipo de datos
#str(base)
#corrijo los acentos y caracteres extraños
original <- base
for(i in names(base)){
eval(parse(text=paste0("base$\"",i,"\"<-str_replace_all(stri_trans_general(original$\"",i,"\",id=\"latin-ascii\"), \"[^[:alnum:]]\", \" \")")))
}
names(base)<-stri_trans_general(names(base),id="latin-ascii")
#corrección del tipo de datos
#cambio el formato de fecha de texto a date
base$When.did.you.see.the.claim. <- as.Date(base$When.did.you.see.the.claim., format="%m %d %Y")
#cambio formato de pais a factor
base$Country.1 <- as.factor(base$Country.1)
base$Country.2 <- as.factor(base$Country.2)
base$Country.3 <- as.factor(base$Country.3)
base$Country.4 <- as.factor(base$Country.4)
#cambio organizacion a factor
base$Organization <- as.factor(base$Organization)
#cambio quien posteo a factor
base$Who.said.posted.it. <- as.factor(base$Who.said.posted.it.)
#cambio lenguaje a factor
base$Language.of.your.fact.check <- as.factor(base$Language.of.your.fact.check)
#cambio rating factor
base$Final.rating <- as.factor(base$Final.rating)
#cambio categoría a factor
base$Category <- as.factor(base$Category)
#importo base de paises para extraer continente
paises <- read.csv("https://pkgstore.datahub.io/JohnSnowLabs/country-and-continent-codes-list/country-and-continent-codes-list-csv_csv/data/b7876b7f496677669644f3d1069d3121/country-and-continent-codes-list-csv_csv.csv", sep = "," )
paises$nombre_corto <- stringr::str_split_fixed(paises$Country_Name,",",2)[,1]
paises <- paises[,c("Continent_Name", "nombre_corto")]
#corrijo algunos paises
paises$nombre_corto[paises$nombre_corto == "United Kingdom of Great Britain & Northern Ireland"] <- "United Kingdom"
paises$nombre_corto[paises$nombre_corto == "United States of America"] <- "United States"
#creo cuatro variables continente, 1 por pais
base <- dplyr::left_join(base, paises, by=c("Country.1" = "nombre_corto"), keep= FALSE, suffix=c("1","2"))
base <- dplyr::left_join(base, paises, by=c("Country.2" = "nombre_corto"), keep= FALSE, suffix=c("1","2"))
base <- dplyr::left_join(base, paises, by=c("Country.3" = "nombre_corto"), keep= FALSE, suffix=c("3","4"))
base <- dplyr::left_join(base, paises, by=c("Country.4" = "nombre_corto"), keep= FALSE, suffix=c("3","4"))
#reviso cuales quedaron sin dato
#View(base[is.na(base$Continent_Name1),])
#View(base[is.na(base$Continent_Name2) & (base$Country.2 != ""),])
#arreglo los paises/areas sin continente
base$Continent_Name1[base$Country.1 == "Middle East"] <- "Asia"
base$Continent_Name2[base$Country.2 == "North Africa"] <- "Africa"
gedwd()
getwd()
setwd("C:/Users/Porotos/Documents/Desconfio_Covid")
#leo la base de datos
base <- read.csv("../Base de datos.csv", sep= ",")
getwd()
setwd("C:/Users/Porotos/Documents/Desconfio_Covid/")
#leo la base de datos
base <- read.csv("../Base de datos.csv", sep= ",")
#leo la base de datos
base <- read.csv("Base de datos.csv", sep= ",")
#primera mirada a los datos
#View(base)
#chequeo tipo de datos
#str(base)
#corrijo los acentos y caracteres extraños
original <- base
for(i in names(base)){
eval(parse(text=paste0("base$\"",i,"\"<-str_replace_all(stri_trans_general(original$\"",i,"\",id=\"latin-ascii\"), \"[^[:alnum:]]\", \" \")")))
}
names(base)<-stri_trans_general(names(base),id="latin-ascii")
#corrección del tipo de datos
#cambio el formato de fecha de texto a date
base$When.did.you.see.the.claim. <- as.Date(base$When.did.you.see.the.claim., format="%m %d %Y")
#cambio formato de pais a factor
base$Country.1 <- as.factor(base$Country.1)
base$Country.2 <- as.factor(base$Country.2)
base$Country.3 <- as.factor(base$Country.3)
base$Country.4 <- as.factor(base$Country.4)
#cambio organizacion a factor
base$Organization <- as.factor(base$Organization)
#cambio quien posteo a factor
base$Who.said.posted.it. <- as.factor(base$Who.said.posted.it.)
#cambio lenguaje a factor
base$Language.of.your.fact.check <- as.factor(base$Language.of.your.fact.check)
#cambio rating factor
base$Final.rating <- as.factor(base$Final.rating)
#cambio categoría a factor
base$Category <- as.factor(base$Category)
#importo base de paises para extraer continente
paises <- read.csv("https://pkgstore.datahub.io/JohnSnowLabs/country-and-continent-codes-list/country-and-continent-codes-list-csv_csv/data/b7876b7f496677669644f3d1069d3121/country-and-continent-codes-list-csv_csv.csv", sep = "," )
paises$nombre_corto <- stringr::str_split_fixed(paises$Country_Name,",",2)[,1]
paises <- paises[,c("Continent_Name", "nombre_corto")]
#corrijo algunos paises
paises$nombre_corto[paises$nombre_corto == "United Kingdom of Great Britain & Northern Ireland"] <- "United Kingdom"
paises$nombre_corto[paises$nombre_corto == "United States of America"] <- "United States"
#creo cuatro variables continente, 1 por pais
base <- dplyr::left_join(base, paises, by=c("Country.1" = "nombre_corto"), keep= FALSE, suffix=c("1","2"))
base <- dplyr::left_join(base, paises, by=c("Country.2" = "nombre_corto"), keep= FALSE, suffix=c("1","2"))
base <- dplyr::left_join(base, paises, by=c("Country.3" = "nombre_corto"), keep= FALSE, suffix=c("3","4"))
base <- dplyr::left_join(base, paises, by=c("Country.4" = "nombre_corto"), keep= FALSE, suffix=c("3","4"))
#reviso cuales quedaron sin dato
#View(base[is.na(base$Continent_Name1),])
#View(base[is.na(base$Continent_Name2) & (base$Country.2 != ""),])
#arreglo los paises/areas sin continente
base$Continent_Name1[base$Country.1 == "Middle East"] <- "Asia"
base$Continent_Name2[base$Country.2 == "North Africa"] <- "Africa"
#defino los valores de los popup
state_popup <- paste0("<strong>Pais: </strong>",
countries_p$name,
"<br><strong>Cantidad </strong>",
countries_p$Freq)
#grafico el mapa
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
#analisis por Continente
#agrupo totales por continente
total_x_cont <- rbind(as.data.frame(table(base$Continent_Name1)), as.data.frame(table(base$Continent_Name2)))
total_x_cont <- aggregate(total_x_cont$Freq, by=list(Var1 = total_x_cont$Var1), FUN=sum)
#cambio los nombres de las columnas para graficar
colnames(total_x_cont) <- c("continent", "Freq")
#imprimo el gráfico
graf_cont <- ggplot(total_x_cont, aes(x=continent, y=Freq, fill=Freq)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
ggtitle("Cantidad de casos por continente") +
xlab("Continente")
plotly::ggplotly(graf_cont)
#preparo los datos para imprimir el mapa
countries@data <- left_join(countries@data, total_x_cont, by=c("continent"))
pal <- colorNumeric("Blues", NULL)
leaflet(countries) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq)) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x)))
#defino la paleta de colores
pal <- colorNumeric("Reds", NULL)
#defino los valores de los popup
state_popup <- paste0("<strong>Pais: </strong>",
countries_p$name,
"<br><strong>Cantidad </strong>",
countries_p$Freq)
#grafico el mapa
leaflet(countries_p) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(Freq),
popup = state_popup) %>%
addLegend(pal = pal, values = ~Freq, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x))) %>%
View(base)
table(base$Organization)
total_x_fuente <- rbind(as.data.frame(table(base$Organization)))
total_x_fuente
#agrupo totales
total_x_fuente <- rbind(as.data.frame(table(base$Organization)))
#cambio los nombres de las columnas para graficar
colnames(total_x_fuente) <- c("Organizacion", "Freq")
#imprimo el gráfico
graf_fuente <- ggplot(total_x_fuente, aes(x=Organizacion, y=Freq, fill=Freq)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
ggtitle("Cantidad de reportes por Organización") +
xlab("Organización Reportante")
plotly::ggplotly(graf_fuente)
total_x_fuente
ggplot(total_x_fuente, aes(x=Organizacion, y=Freq, fill=Freq)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
ggtitle("Cantidad de reportes por Organización") +
xlab("Organización Reportante")
plotly::ggplotly(graf_fuente)
fact_desc <- data.frame(base$What.did.you.fact.check.)
fact_desc <- tibble(text = fact_desc)
fact_desc
fact_desc <- mutate(fact_desc, text = text$base.What.did.you.fact.check.)
fact_desc
fact_desc_word <-  unnest_tokens(fact_desc, word, text)
library(wordcloud)
fact_desc_word <-  unnest_tokens(fact_desc, word, text)
library(tidytext)
library(tidyverse)
library(wordcloud)
fact_desc_word <-  unnest_tokens(fact_desc, word, text)
fact_desc_word
custom_stop_words <- bind_rows(stop_words, data_frame(word = tm::stopwords("english"),lexicon = "custom"))
custom_stop_words
nrow(fact_desc_word)
#saco los stop words
fact_desc_word <- anti_join(fact_desc_word, custom_stop_words)
nrow(fact_desc_word)
fact_desc_word %>% count(word, sort = TRUE)
#grafico la frecuencia de palabras
fact_desc_word %>%
count(word, sort = TRUE) %>%
#filter(n > 3500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#grafico la frecuencia de palabras
fact_desc_word %>%
count(word, sort = TRUE) %>%
filter(n > 10) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#grafico la frecuencia de palabras
fact_desc_word %>%
count(word, sort = TRUE) %>%
filter(n > 5) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#grafico la frecuencia de palabras
fact_desc_word %>%
count(word, sort = TRUE) %>%
filter(n > 2) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#preparo un df para graficar
a <- fact_desc_word %>%
count(word)
wordcloud(words = a$word, freq = a$n, min.freq = 1, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 3, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 4, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 8, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = log(a$n), min.freq = 8, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
a
tail(a)
max(a$n)
a[a$n == 23,]
log(23)
wordcloud(words = a$word, freq = log(a$n), min.freq = 0, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = log(a$n), min.freq = 9, max.words=70,
random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 3, max.words=70,
random.order=FALSE,,scale=c(4,.5)
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 3, max.words=70,
random.order=FALSE,,scale=c(4,.5),
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 3, max.words=70,
random.order=FALSE,,scale=c(2,.5),
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 1, max.words=70,
random.order=FALSE,,scale=c(2,.5),
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 1, max.words=70,
random.order=FALSE,,scale=c(3,.5),
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 1, max.words=70,
random.order=FALSE,,scale=c(3,.7),
colors=brewer.pal(8, "Dark2"))
wordcloud(words = a$word, freq = a$n, min.freq = 1, max.words=70,
random.order=FALSE,,scale=c(3,.6),
colors=brewer.pal(8, "Dark2"))
table(base$Country.1, base$Who.said.posted.it.)
table(base$Who.said.posted.it.)
table(base$Category)
table(base$Country.1, base$Category)
a <- as.data.frame(table(base$Country.1, base$Category))
View(a)
a <- as.data.frame(table(base$Continent_Name1, base$Category))
install.packages('rvest')
install.packages("rvest")
library('rvest')
